Question- What Is an Immutable Object?
Answer-  Immutable object is an object whose internal state remains constant after it has been entirely created.
This means that once the object has been assigned to a variable, we can neither update the reference nor mutate the internal
 state by any means.

Question- Why Is String Immutable in Java?
Answer- The key benefits of keeping this class as immutable are caching, security, synchronization, and performance.
Let's discuss how these things work;

1. Security -

The String is widely used in Java applications to store sensitive pieces of information like usernames, passwords,
connection URLs, network connections, etc. It's also used extensively by JVM class loaders while loading classes.

Hence securing String class is crucial regarding the security of the whole application in general.

In general, immutability comes to our rescue in this case because it's easier to operate with sensitive code
when values don't change because there are fewer interleaving of operations that might affect the result.

2. Synchronization -

Being immutable automatically makes the String thread safe since they won't be changed when accessed from multiple threads.
Hence immutable objects, in general, can be shared across multiple threads running simultaneously.
They're also thread-safe because if a thread changes the value, then instead of modifying the same, a new String would be
created in the String pool. Hence, Strings are safe for multi-threading.

3. Hashcode Caching -

Since String objects are abundantly used as a data structure, they are also widely used in hash implementations like
HashMap, HashTable, HashSet, etc. When operating upon these hash implementations, hashCode() method is called quite
frequently for bucketing.

The immutability guarantees Strings that their value wonâ€™t change. So the hashCode() method is overridden in String class
to facilitate caching, such that the hash is calculated and cached during the first hashCode() call and the same value
is returned ever since.


4. Performance -

String pool exists because Strings are immutable. In turn, it enhances the performance by saving heap memory and faster
access of hash implementations when operated with Strings.
String is the most widely used data structure, improving the performance of String have a considerable effect on improving
the performance of the whole application in general.

5. Conclusion
Through this article, we can conclude that Strings are immutable precisely so that their references can be treated as a
normal variable and one can pass them around, between methods and across threads, without worrying about whether the
actual String object it's pointing to will change.

